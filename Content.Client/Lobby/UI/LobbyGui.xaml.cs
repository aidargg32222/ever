using System.Linq;
using Content.Client.Atlanta.Info.PlayersScore;
using Content.Client.Message;
using Content.Client.UserInterface.Systems.EscapeMenu;
using Robust.Client.AutoGenerated;
using Robust.Client.Console;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.XAML;

namespace Content.Client.Lobby.UI
{
    [GenerateTypedNameReferences]
    public sealed partial class LobbyGui : UIScreen
    {
        [Dependency] private readonly IClientConsoleHost _consoleHost = default!;

        public LobbyGui()
        {
            RobustXamlLoader.Load(this);
            IoCManager.InjectDependencies(this);
            SetAnchorPreset(MainContainer, LayoutPreset.Wide);
            SetAnchorPreset(Background, LayoutPreset.Wide);

            LobbySong.SetMarkup(Loc.GetString("lobby-state-song-no-song-text"));

            LeaveButton.OnPressed += _ => _consoleHost.ExecuteCommand("disconnect");
            OptionsButton.OnPressed += _ => UserInterfaceManager.GetUIController<OptionsUIController>().ToggleWindow();

<<<<<<< HEAD
            PopulatePlayerScoreHeader();
            PopulatePlayersScoreData();
=======
            CollapseButton.OnPressed += _ => TogglePanel(false);
            ExpandButton.OnPressed += _ => TogglePanel(true);
>>>>>>> upstream/master
        }

        public void SwitchState(LobbyGuiState state)
        {
            DefaultState.Visible = false;
            CharacterSetupState.Visible = false;

            switch (state)
            {
                case LobbyGuiState.Default:
                    DefaultState.Visible = true;
                    RightSide.Visible = true;
                    break;
                case LobbyGuiState.CharacterSetup:
                    CharacterSetupState.Visible = true;

                    var actualWidth = (float) UserInterfaceManager.RootControl.PixelWidth;
                    var setupWidth = (float) LeftSide.PixelWidth;

                    if (1 - (setupWidth / actualWidth) > 0.30)
                    {
                        RightSide.Visible = false;
                    }

                    UserInterfaceManager.GetUIController<LobbyUIController>().ReloadCharacterSetup();

                    break;
            }
        }

        private void TogglePanel(bool value)
        {
            RightSide.Visible = value;
            ExpandPanel.Visible = !value;
        }

        public enum LobbyGuiState : byte
        {
            /// <summary>
            ///  The default state, i.e., what's seen on launch.
            /// </summary>
            Default,
            /// <summary>
            ///  The character setup state.
            /// </summary>
            CharacterSetup
        }

        /*
         * Western Changes
         */

        private void PopulatePlayerScoreHeader()
        {
            var header = new PlayerScoreStatsHeader();
            header.OnHeaderClicked += HeaderClicked;
            PlayersScoreList.AddChild(header);
        }

        private void PopulatePlayersScoreData()
        {
        }

        private void AddPlayerScore(string nickname, int winScore, int kills)
        {
            var entry = new PlayerScoreStatsEntry(nickname, winScore, kills);
            PlayersScoreList.AddChild(entry);
        }

        private void HeaderClicked(PlayerScoreStatsHeader.Header header)
        {
            switch (header)
            {
                case PlayerScoreStatsHeader.Header.Nickname:
                    SortByNickname();
                    break;
                case PlayerScoreStatsHeader.Header.WinScore:
                    SortByWinScore();
                    break;
                case PlayerScoreStatsHeader.Header.Kills:
                    SortByKills();
                    break;
            }
        }

        private void SortByKills()
        {
            var entries = PrepareToSort();

            var sortedEntries = entries.OrderByDescending(entry => entry.KillScoreInt).ToList();

            foreach (var entry in sortedEntries)
            {
                PlayersScoreList.AddChild(entry);
            }
        }

        private void SortByWinScore()
        {
            var entries = PrepareToSort();

            var sortedEntries = entries.OrderByDescending(entry => entry.WinScoreInt).ToList();

            foreach (var entry in sortedEntries)
            {
                PlayersScoreList.AddChild(entry);
            }
        }

        private void SortByNickname()
        {
            var entries = PrepareToSort();

            var sortedEntries = entries.OrderBy(entry => entry.NicknameText).ToList();

            foreach (var entry in sortedEntries)
            {
                PlayersScoreList.AddChild(entry);
            }
        }

        private List<PlayerScoreStatsEntry> PrepareToSort()
        {
            var header = PlayersScoreList.GetChild(0) as PlayerScoreStatsHeader;

            var entries = PlayersScoreList.Children.OfType<PlayerScoreStatsEntry>().ToList();

            PlayersScoreList.RemoveAllChildren();

            if (header != null)
            {
                PlayersScoreList.AddChild(header);
            }
            else
            {
                PopulatePlayerScoreHeader();
            }

            return entries;
        }

        public void UpdateScoreList(List<(string, int, int)> list)
        {
            PrepareToSort();
            foreach (var entry in list)
            {
                AddPlayerScore(entry.Item1, entry.Item2, entry.Item3);
            }

            SortByWinScore();
        }
    }
}
